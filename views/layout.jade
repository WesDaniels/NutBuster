!!!5
html(style='width: 100%; height: 100%')
	head
		meta(name='viewport', content='width=device-width', initial-scale='1.0', maximum-scale='1.0', user-scalable='no')
		link(href='//netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/css/bootstrap.no-icons.min.css', rel='stylesheet')
		link(href='dist/leaflet.css', rel='stylesheet')
		script(src='http://code.jquery.com/jquery-latest.js')
		link(href='dist/my.css', rel='stylesheet')
	body(style='width: 100%; height: 100%')
		#aboutWrapper
			#about
				h3 Nut Buster 1.0
				p Bird Dog them Squirrels!
					img(src='dist/images/squirrel.jpg', alt='')
				#continue.button.blue Continue
				p No squirrels should be harmed with this tool.
				#clearBoth(style='clear: both;')
		#mapWrapper(style='width: 100%; margin-left: 250px; height: 100%;')
			#map(style='float: left; width: 100%; height: 100%')
		#log(style='float: left; height: 100%; width: 270px; border: solid 1px black; top: 0px; left: 0px; position: fixed; background-color: white; overflow-y: scroll;')
			#toggleLog(style='border: solid 1px black; width: 40px; float: right; text-align: center; margin: 5px;').button.blue Log
			#clearBoth(style='clear: both;')
		script(src='dist/leaflet.js')
		script
			var myIcon = L.icon({
				iconUrl: 'dist/images/my-icon.png',
				iconRetinaUrl: 'dist/images/my-icon.png',
				iconSize: [15, 25],
				iconAnchor: [8, 25],
				popupAnchor: [-10, -20],
				shadowUrl: 'dist/images/marker-shadow.png',
				shadowRetinaUrl: 'dist/images/marker-shadow.png',
				shadowSize: [68, 95],
				shadowAnchor: [22, 94]
			});
			
			var sqlIcon = L.icon({
				iconUrl: 'dist/images/marker-icon.png',
				iconRetinaUrl: 'dist/images/marker-icon.png',
				iconSize: [32, 37],
				iconAnchor: [16, 37],
				popupAnchor: [0, -30],
				shadowUrl: 'dist/images/marker-shadow.png',
				shadowRetinaUrl: 'dist/images/marker-shadow.png',
				shadowSize: [68, 95],
				shadowAnchor: [22, 94]
			});
		
		
				$('#toggleLog').click(function() {
					if ($('#log').position().left < -100)
					{
						$('#log').animate({ left: '+=200' }, 400 );
						$('#mapWrapper').css('margin-left','250px');
						$('#log').css('overflow-y','scroll');
					}
					else
					{
						$('#log').animate({ left: '-=200' }, 400 );
						$('#mapWrapper').css('margin-left','50px');
						$('#log').css('overflow-y','hidden');
					}
				});
		
				$('#continue').click(function() {
					$('#aboutWrapper	').hide();
				});
		
				var cities = new L.LayerGroup();

				var obj = !{mainContent}
				var latlngs1 =new Array();
				var latlngs2 =new Array();
				var latlngs3 =new Array();
				
				var i1 = 0;
				var i2 = 0;
				var i3 = 0;
				
				var map = L.map('map').setView([30.5174933,-97.6866465], 20);

				obj.sort(function(a,b) { return parseFloat(b[5]) - parseFloat(a[5]) } );
				
				obj.forEach(function(nm) {
					if (nm[0] <= 31)
					{
						L.marker([nm[0], nm[1]], {icon: sqlIcon}).addTo(map).bindPopup("<div id='mp" + nm[5] + "'><b>" + nm[2] +"</b> " + nm[4] + "<br />" + nm[3] + "</div>").openPopup();
						
						$('#log').append("<div id='d" + nm[5] + "' class='logentry " + nm[2] + "'><div class='logEntryText'>[" + nm[4] + "]  <b>" + nm[2] +":</b><br />" + nm[3] + "</div><div style='clear:both;'></div>");

						//.bindPopup(nm[2] + ': ' + nm[3]).addTo(cities);
						
						if (nm[2].slice(-1) == '1')
						{
							latlngs1[i1] = new L.LatLng(nm[0], nm[1]);
							i1 += 1;
						}
						if (nm[2].slice(-1) == '2')
						{
							latlngs2[i2] = new L.LatLng(nm[0], nm[1]);
							i2 += 1;
						}
						if (nm[2].slice(-1) == '3')
						{
							latlngs3[i3] = new L.LatLng(nm[0], nm[1]);
							i3 += 1;
						}
					}
				});
				

				
				L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
					attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
				}).addTo(map);
				
				var cmAttr = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade',
					cmUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/{styleId}/256/{z}/{x}/{y}.png';

				var minimal   = L.tileLayer(cmUrl, {styleId: 22677, attribution: cmAttr}),
					midnight  = L.tileLayer(cmUrl, {styleId: 999,   attribution: cmAttr}),
					motorways = L.tileLayer(cmUrl, {styleId: 46561, attribution: cmAttr});
				
				var baseLayers = {
					"Minimal": minimal,
					"Night View": midnight
				};

				var overlays = {
					"Motorways": motorways,
					"Cities": cities
				};

				L.control.layers(baseLayers, overlays).addTo(map);

				// create a red polyline from an arrays of LatLng points
				var polyline = L.polyline(latlngs1, {color: 'red'}).addTo(map);
				var polyline = L.polyline(latlngs2, {color: 'blue'}).addTo(map);
				var polyline = L.polyline(latlngs3, {color: 'green'}).addTo(map);

				// zoom the map to the polyline
				map.fitBounds(polyline.getBounds());
				
				function onMapClick(e) {
					popup
						.setLatLng(e.latlng)
						.setContent("You clicked the map at " + e.latlng.toString())
						.openOn(map);
				}
				
				var popup = L.popup();
				map.on('click', onMapClick);
				
				function onLocationFound(e) {
					var radius = e.accuracy / 2;

					L.marker(e.latlng, {icon: myIcon}).addTo(map);
					L.circle(e.latlng, radius).addTo(map);
				}

				map.on('locationfound', onLocationFound);
				
				function onLocationError(e) {
					alert('Please enable location services for this browser.');
				}
				
				map.on('locationerror', onLocationError);
				
				$('#toggleLog').click();
				
				map.locate({setView: true, maxZoom: 16});